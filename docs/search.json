[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Debugging in R",
    "section": "",
    "text": "Overview\nThis mini-workshop will cover the primary tools R provides to identify and fix problems in your code. It will also discuss when to use each and give you some hands on practice.\nWorkshop site: http://d-rug.github.io/debugging_in_R"
  },
  {
    "objectID": "01_intro.html#quarto",
    "href": "01_intro.html#quarto",
    "title": "Introduction",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "01_intro.html#running-code",
    "href": "01_intro.html#running-code",
    "title": "Introduction",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "02_example.html#quarto",
    "href": "02_example.html#quarto",
    "title": "Example",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "02_example.html#running-code",
    "href": "02_example.html#running-code",
    "title": "Example",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "01_intro.html#what-is-a-bug",
    "href": "01_intro.html#what-is-a-bug",
    "title": "Introduction",
    "section": "What is a bug?",
    "text": "What is a bug?\nSometimes it’s a real bug:\nBut most of the time it is computer code that did not produce the output you anticipated."
  },
  {
    "objectID": "01_intro.html#debugging-tasks",
    "href": "01_intro.html#debugging-tasks",
    "title": "Introduction",
    "section": "Debugging Tasks",
    "text": "Debugging Tasks\n\nIdentify the bug\nLocate (the cause of) the bug\nInvestigate the bug\nReproduce the bug\nFix the bug\nPrevent prevent bug\n\nNot all of these steps will be relevant every time but some of them will always be relevant and sometimes you will need all of them"
  },
  {
    "objectID": "02_tasks.html#identify-the-bug",
    "href": "02_tasks.html#identify-the-bug",
    "title": "Tasks",
    "section": "1. Identify The Bug",
    "text": "1. Identify The Bug\nKnowing you have a bug is the first step.\nIf you have an error message, this step is taken care of for you:\n\nx = c(1, 39, 2982, '5', 22)\n\nsqrt(x)\n\nError in sqrt(x): non-numeric argument to mathematical function\n\n\nHowever, many times there will be no error messages, you just have to figure out that something isn’t right.\n\nx = c(1, 39, 2982, '5', 22)\n\nrange(x)\n\n[1] \"1\" \"5\"\n\n\n\nStrategies\nDevelop expectations about what your data should look like and check them frequently, not just at the end of your process.\n\nInvestigative functions\n\nprint()\nhead()\nstr()\nView()\nrange()\ntable()\n\n\n\nUnit tests\nUnit tests are outside the scope of this workshop but you can find more information via the testthat package.\n\n\n\nCommon Problems\n\nTypos/syntax errors\nObject is not the class that you think it is\nVariable is not the type that you think it is\nVariables missing from data\nMissing values (NAs) in the data"
  },
  {
    "objectID": "02_tasks.html#reproduce-the-bug",
    "href": "02_tasks.html#reproduce-the-bug",
    "title": "Tasks",
    "section": "Reproduce the Bug",
    "text": "Reproduce the Bug\nWhen posting to\n\nReprexes\nReproducible examples, or reprexes are snippets of code that can be run by anyone, without any specialized data or software. Many times, the act of creating a reprex will help you debug your code.\nRemember to: - Create the reprex in a new script - include all packages loaded in your environment - simulate data or provide an easily accessible small subset of your data - remove all extraneous code, like calls to print() and head() - test your reprex to make sure it triggers the error - clear your environment/restart R before testing your reprex"
  },
  {
    "objectID": "02_tasks.html#locate-the-bug",
    "href": "02_tasks.html#locate-the-bug",
    "title": "Tasks",
    "section": "Locate the Bug",
    "text": "Locate the Bug\n\nStart debugging with an empty environment\nRun script interactively in the console and use investigative functions\nprint debugging\ndebug() and debugonce()\nbrowser() (+ trace())\nFor rmarkdown/quarto\n\nbreak up larger chunks into smaller ones\nrun code in console\n\n\nSometimes simply locating the bug is enough to figure out how to solve it, like in the case of syntax errors. However, many times locating the bug is just the beginning…"
  },
  {
    "objectID": "02_tasks.html",
    "href": "02_tasks.html",
    "title": "Tasks",
    "section": "",
    "text": "1. Identify The Bug\nKnowing you have a bug is the first step.\nIf you have an error message, this step is taken care of for you:\nx = c(1, 39, 2982, '5', 22)\n\nsqrt(x)\n\nError in sqrt(x): non-numeric argument to mathematical function\nHowever, many times there will be no error messages, you just have to figure out that something isn’t right.\nx = c(1, 39, 2982, '5', 22)\n\nrange(x)\n\n[1] \"1\" \"5\"\nSometimes simply locating the bug is enough to figure out how to solve it, like in the case of syntax errors. However, many times locating the bug is just the beginning…\nWhen identifying the location of the bug is not enough to figure out how to fix it, it’s time to go looking for help.\nTips for googling:\nSometimes though, Google doesn’t doesn’t even know what you are talking about. In this case, your best option is to get proactive and ask for help. You can do this through any number of forums, including but not limited to:\nWhenever you ask for help, important that you provide people all the information they need to understand the problem, but not so much information that that determining the problem becomes a slog. Enter the Reprex.\nWhen asking your question make sure you:\nSometimes fixing the bug is trivial once you have determined the cause. Other times, there is more work to do.\nFor more information on reporting bugs in R see the Reporting Bugs in R page on CRAN."
  },
  {
    "objectID": "02_tasks.html#fix-the-bug",
    "href": "02_tasks.html#fix-the-bug",
    "title": "Tasks",
    "section": "Fix the Bug",
    "text": "Fix the Bug"
  },
  {
    "objectID": "02_tasks.html#pevent-the-bug",
    "href": "02_tasks.html#pevent-the-bug",
    "title": "Tasks",
    "section": "Pevent the Bug",
    "text": "Pevent the Bug\n\nDocument, document, document!\ncomments\nREADMEs\ncommit messages\nWrite your own error messages using stop() or warnings using warning()"
  },
  {
    "objectID": "02_tasks.html#strategies",
    "href": "02_tasks.html#strategies",
    "title": "Tasks",
    "section": "Strategies",
    "text": "Strategies\nDevelop expectations about what your data should look like and check them frequently, not just at the end of your process.\n\nInvestigative functions\n\nprint()\nhead()\nstr()\nView()\nrange()\ntable()\n\n\n\nUnit tests\nUnit tests are outside the scope of this workshop but you can find more information via the testthat package."
  },
  {
    "objectID": "02_tasks.html#common-problems",
    "href": "02_tasks.html#common-problems",
    "title": "Tasks",
    "section": "Common Problems",
    "text": "Common Problems\n\nTypos/syntax errors\nObject is not the class that you think it is\nVariable is not the type that you think it is\nVariables missing from data\nMissing values (NAs) in the data"
  },
  {
    "objectID": "03_example.html#what-is-a-bug",
    "href": "03_example.html#what-is-a-bug",
    "title": "Introduction",
    "section": "What is a bug?",
    "text": "What is a bug?\nSometimes it’s a real bug:\nBut most of the time it is computer code that did not produce the output you anticipated."
  },
  {
    "objectID": "03_example.html#debugging-tasks",
    "href": "03_example.html#debugging-tasks",
    "title": "Introduction",
    "section": "Debugging Tasks",
    "text": "Debugging Tasks\n\nIdentify the bug\nLocate (the cause of) the bug\nInvestigate the bug\nReproduce the bug\nFix the bug\nPrevent prevent bug\n\nNot all of these steps will be relevant every time but some of them will always be relevant and sometimes you will need all of them"
  },
  {
    "objectID": "03_example.html",
    "href": "03_example.html",
    "title": "An Example",
    "section": "",
    "text": "# renv::init()\n# pkg_list = c('terra', 'geodata', 'ggplot2', 'tidyterra', 'rnaturalearth', \n#              'RColorBrewer', 'devtools')\n# install.packages(pkg_list)\n# devtools::install_github(\"ropensci/rnaturalearthhires\")\n\n\n# Setup -------------------------------------------------------------------\nlibrary(RColorBrewer)\nlibrary(terra)\n\nterra 1.7.55\n\nlibrary(geodata)\nlibrary(ggplot2)\nlibrary(tidyterra)\n\n\nAttaching package: 'tidyterra'\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nlibrary(rnaturalearth)\n\nSupport for Spatial objects (`sp`) will be deprecated in {rnaturalearth} and will be removed in a future release of the package. Please use `sf` objects with {rnaturalearth}. For example: `ne_download(returnclass = 'sf')`\n\n#convert breaks to a list of labels where only the multiples of n are displayed\nscale_labels = function(n=5) {\n  lab_fun = function(x) sapply(x, function(x) if (x %% n == 0) paste0(x) else '')\n  \n  return(lab_fun)\n}\n\n#labeling function to convert raster layer names to season names\nx_to_season = function(x) {\n  seasons = c('Winter', 'Spring', 'Summer', 'Fall') #list of seasons\n  \n  #remove text from layer names and convert to numbers\n  id = as.numeric(gsub('[^0-9]', '', x))\n  \n  return(seasons[id])\n  \n}\n\n#convert function to labeller class\nx_to_season_lab = as_labeller(x_to_season)\n\n# Get Data ----------------------------------------------------------------\n\n#global precipitation data from worldclim\n#you can download by country but the resolution is forced to be 0.5\nprec = worldclim_global(var='prec', res=5, path='.')\nnames(prec) = month.name\n\n#outlines of US States\nusa_sf = ne_states(iso_a2 = 'us', returnclass = 'sf')\nusa = vect(usa_sf)\n\n#R logo\nlogo_fn = rast(system.file(\"ex/logo.tif\", package=\"terra\"))\nlogo = rast(logo_fn) \n\n#Albers Equal Area North American projection\nalbers_NA = crs(\"ESRI:102008\")\n\nWarning: PROJ: proj_get_authorities_from_database: Cannot find proj.db (GDAL\nerror 1)\n\n\nError: [rast] empty srs\n\n#blue color palette function for plotting\nblues = colorRampPalette(brewer.pal(9, 'Blues'))\n\n\n# Filtering ---------------------------------------------------------------\n\nnot_contiguous = c('Alaska', 'Hawaii') \nvoi = c('name', 'type', 'region', 'postal')\n\n#removing extraneous data for easier plotting\nc_usa = usa[which(!usa$name %in% not_contiguous), voi]\n\n\n# Spatial comparison ------------------------------------------------------\n\n#convert raster to lon/lat to match USA data\nlogo_ll = project(logo, crs(usa))\n\nWarning: PROJ: proj_create_from_database: Cannot find proj.db (GDAL error 1)\n\n\nWarning: Cannot find coordinate operations from `ENGCRS[\"Cartesian\n(Meter)\",EDATUM[\"\"],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]]]'\nto `GEOGCRS[\"WGS 84\",DATUM[\"World Geodetic System 1984\",ELLIPSOID[\"WGS\n84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],CS[ellipsoidal,2],AXIS[\"latitude\",north,ORDER[1],ANGLEUNIT[\"degree\",0.0174532925199433]],AXIS[\"longitude\",east,ORDER[2],ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]]'\n(GDAL error 6)\n\n\nError: [project] cannot get output boundaries\n\n#convert raster to polygons so we can use rgeos functionality\nlogo_sp = as.polygons(logo_ll)\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'as.polygons': object 'logo_ll' not found\n\n#ask whether the R logo intersects \nif (any(is.related(logo_sp, usa, relation='intersects'))) {\n  print('The R logo is in the United States!')\n} else {\n  print('The R logo is not in the United States')\n}\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'is.related': object 'logo_sp' not found\n\n# Area calculation --------------------------------------------------------\n\n#get the area of each layer\nlogo_area_layers = expanse(logo_ll)\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'expanse': object 'logo_ll' not found\n\n#get the area of the first layer\nlogo_area = logo_area_layers[logo_area_layers==1, 'area']\n\nError in eval(expr, envir, enclos): object 'logo_area_layers' not found\n\n# get area of polygons\nusa_area = sum(expanse(usa))\n\nif (usa_area &gt; logo_area) {\n  print('The contiguous United States is bigger than the R logo.')\n} else {\n  print('The R logo is bigger than the contiguous United States!')\n}\n\nError in eval(expr, envir, enclos): object 'logo_area' not found\n\n# Precipitation Seasonality in the United States --------------------------\n\nnlyr(prec) #data is monthly\n\n[1] 12\n\nrange(values(prec), na.rm=TRUE) #data is likely in mm\n\n[1]    0 2578\n\n#crop precip data to contiguous us extent and then mask it to create the correct shape\nprec_usa = mask(crop(prec, c_usa), c_usa)\n\n#project precip to albers projection\nprec_albers = project(prec_usa, albers_NA)\n\nError in eval(expr, envir, enclos): object 'albers_NA' not found\n\n#convert mm to inches\nprec_in = prec_albers*0.0393701\n\nError in eval(expr, envir, enclos): object 'prec_albers' not found\n\n#calculate Seasonality (coefficient of variation for each cell)\nseasonality = app(prec_in, fun=function(x) 100*sd(x, na.rm=TRUE)/mean(x, na.rm=TRUE))\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'app': object 'prec_in' not found\n\n#project contiguous usa polygons\nusa_albers = project(c_usa, albers_NA)\n\nError in eval(expr, envir, enclos): object 'albers_NA' not found\n\n#plot seasonality with state outlines\npar(mfrow=c(1,1))\nplot(seasonality, axes=FALSE, col=blues(120),\n     main='Precipitation Seasonality\\n(coefficient of variation)')\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'seasonality' not found\n\npolys(usa_albers)\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'polys': object 'usa_albers' not found\n\n# Investigate Precipitation Throughout the Seasons ------------------------\n\n#index to group months by quarter\nquarters = c(1, 1, rep(2:4, each=3), 1)\n\n#sum by quarter\nprec_q = tapp(prec_in, index=quarters, fun=sum)\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'tapp': object 'prec_in' not found\n\nmax_val = 30\n\n#set values greater than 30 to be 30 so we can plot on the same scale\nprec_q_30 = classify(prec_q, matrix(c(max_val, 100, max_val), nrow=1))\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'classify': object 'prec_q' not found\n\n#creating a copy of polygons for each quarter\nusa_lyr = merge(usa_albers, data.frame(lyr=names(prec_q_30)))\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'merge': object 'usa_albers' not found\n\n# list of breaks in precip values for plotting\nscale_breaks = seq(0, max_val, by=0.5)\n\np &lt;- ggplot() + #initialize plot\n  geom_spatraster(data=prec_q_30) + #add precip raster\n  geom_spatvector(data=usa_lyr, fill=NA) + #add polygons, fill with nothing\n  facet_wrap(~lyr, labeller=x_to_season_lab) + #facet wrap by layer\n  labs(title='Quarterly Precipitation in the Contiguous United States') +\n  \n  #create binned color scheme with appropriate breaks and labels\n  scale_fill_stepsn(breaks=scale_breaks, colors=blues(length(scale_breaks)), \n                    labels=scale_labels(n=5), name='Precip (in)', na.value=NA) +\n  \n  theme_bw(25) + #set text size\n  theme(axis.text=element_blank(), #remove background lines/ticks/text\n        axis.ticks=element_blank(),\n        panel.grid = element_blank(),\n        legend.text = element_text(size=17),\n        legend.key.size = unit(1.6, 'cm')) \n\nError in eval(expr, envir, enclos): object 'prec_q_30' not found\n\np\n\nError in eval(expr, envir, enclos): object 'p' not found\n\n# Averaging by State ------------------------------------------------------\n\n#extract average precip by month for each state\nusa_precip = extract(prec_in, usa_albers, fun=mean, ID=FALSE, bind=TRUE, na.rm=TRUE)\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'extract': object 'prec_in' not found\n\n#bins for monthly precip\nmonth_breaks = seq(0, 7.5, by=0.5)\n\n#plot monthly precipitation averages using terra functionality\nplot(usa_precip, y=month.name, breaks=month_breaks, col=blues(length(month_breaks)))\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'usa_precip' not found\n\n# Using ggplot ------------------------------------------------------------\n\nrequire(sf)\n\nLoading required package: sf\n\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nusa_precip_long = st_as_sf(usa_precip) %&gt;% #convert to simple features\n  #convert to long\n  tidyr::pivot_longer(cols = tidyselect::all_of(month.name), names_to = 'month',\n                      values_to = 'precip')\n\nError in eval(expr, envir, enclos): object 'usa_precip' not found\n\n#reorder factor levels\nusa_precip_long$month = factor(usa_precip_long$month, levels=month.name)\n\nError in eval(expr, envir, enclos): object 'usa_precip_long' not found\n\n#plot using ggplot\npp = ggplot(data=usa_precip_long) + \n  geom_sf(aes(fill=precip)) +\n  facet_wrap(~month) +\n  labs(title='Monthly Precipitation in the Contiguous United States') +\n  \n  #create binned color scheme with appropriate breaks and labels\n  scale_fill_stepsn(breaks=month_breaks, colors=blues(length(month_breaks)), \n                    labels=scale_labels(n=2), name='Precip (in)', na.value=NA) +\n  theme_bw(20) + #set text size\n  theme(axis.text=element_blank(), #remove background lines/ticks/text\n        axis.ticks=element_blank(),\n        panel.grid = element_blank(),\n        legend.text = element_text(size=17),\n        legend.key.size = unit(1.6, 'cm')) \n\nError in eval(expr, envir, enclos): object 'usa_precip_long' not found\n\npp\n\nError in eval(expr, envir, enclos): object 'pp' not found"
  }
]